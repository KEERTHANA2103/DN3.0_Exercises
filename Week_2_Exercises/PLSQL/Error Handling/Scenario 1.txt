Scenario 1: Handle exceptions during fund transfers between accounts

CREATE OR REPLACE PROCEDURE SafeTransferFunds (
  p_from_account_id IN NUMBER,
  p_to_account_id IN NUMBER,
  p_amount IN NUMBER
) IS
  v_from_balance Accounts.Balance%TYPE;
  v_to_balance Accounts.Balance%TYPE;
BEGIN
  -- Check balance of the from_account
  SELECT Balance INTO v_from_balance
  FROM Accounts
  WHERE AccountID = p_from_account_id
  FOR UPDATE;
  
  -- Check balance of the to_account
  SELECT Balance INTO v_to_balance
  FROM Accounts
  WHERE AccountID = p_to_account_id
  FOR UPDATE;
  
  -- Check if sufficient funds
  IF v_from_balance < p_amount THEN
    RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds in the source account.');
  END IF;
  
  -- Perform the transfer
  UPDATE Accounts
  SET Balance = Balance - p_amount
  WHERE AccountID = p_from_account_id;
  
  UPDATE Accounts
  SET Balance = Balance + p_amount
  WHERE AccountID = p_to_account_id;
  
  -- Log the transaction
  INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
  VALUES (SEQ_TRANSACTIONS.NEXTVAL, p_from_account_id, SYSDATE, p_amount, 'Debit');
  
  INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
  VALUES (SEQ_TRANSACTIONS.NEXTVAL, p_to_account_id, SYSDATE, p_amount, 'Credit');
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END SafeTransferFunds;
/
